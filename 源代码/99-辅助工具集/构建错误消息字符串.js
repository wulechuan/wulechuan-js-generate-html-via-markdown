const 彩色粉笔工具 = require('chalk')

module.exports = {
    构建一条错误消息字符串,
    构建一条错误消息字符串以阐明数据之期望之类型,
}





function 构建一条错误消息字符串(消息正文逐行内容原始值, 发生错误之代码范畴之描述, 发生错误之软件包之名称) {
    let 消息正文逐行内容 = 消息正文逐行内容原始值
    if (!Array.isArray(消息正文逐行内容)) {
        消息正文逐行内容 = [ 消息正文逐行内容 ]
    }

    消息正文逐行内容 = 消息正文逐行内容.filter(条目 => {
        return !!条目 && (
            [
                'number',
                'boolean',
            ].includes(typeof 条目) ||
            (typeof 条目 === 'string' && !!条目.trim())
        )
    })

    if (消息正文逐行内容.length === 0) {
        const 错误消息 = 构建一条错误消息字符串以阐明数据之期望之类型(
            [ '字符串', '数组' ],
            消息正文逐行内容原始值,
            [
                '实参',
                '消息正文逐行内容',
            ],
            '构建一条错误消息字符串()',
            '构建错误消息字符串'
        )

        throw new TypeError(错误消息)
    }

    if (typeof 发生错误之软件包之名称 !== 'string') {
        发生错误之软件包之名称 = ''
    } else {
        发生错误之软件包之名称 = 发生错误之软件包之名称.trim()
    }

    if (typeof 发生错误之代码范畴之描述 !== 'string') {
        发生错误之代码范畴之描述 = ''
    } else {
        发生错误之代码范畴之描述 = 发生错误之代码范畴之描述.trim()
    }

    const 所涉软件包之说明 = 发生错误之软件包之名称
        ? `软件包“${彩色粉笔工具.whiteBright(发生错误之软件包之名称)}”`
        : '不明软件包'

    const 错误范畴说明 = 发生错误之代码范畴之描述
        ? `范畴“${彩色粉笔工具.whiteBright(发生错误之代码范畴之描述)}”`
        : '不明范畴'

    const 错误消息 = [
        '',
        彩色粉笔工具.red(所涉软件包之说明),
        彩色粉笔工具.red(`在${错误范畴说明}中`),
        彩色粉笔工具.red('出现以下错误：'),

        ...消息正文逐行内容.map(某行之内容文本 => {
            return `    ${某行之内容文本}`
        }),
        彩色粉笔工具.red('~'.repeat(79)),
        '',
    ].join('\n')


    return 错误消息
}





function 构建一条错误消息字符串以阐明数据之期望之类型(合规的类型列表之原始值, 得到的实际值, 该值之称谓或访问路径之原始值, 发生错误之代码范畴之描述, 发生错误之软件包之名称) {
    let 合规的类型列表 = 合规的类型列表之原始值

    if (!合规的类型列表) {
        合规的类型列表 = []
    } else if (!Array.isArray(合规的类型列表)) {
        合规的类型列表 = [ 合规的类型列表 ]
    }

    合规的类型列表 = 合规的类型列表.filter(合规类型 => {
        const 是有效的字符串 = typeof 合规类型 === 'string' && [
            '<不应存在>',
            '对象',
            '非数组之对象',
            '数组',
            '布尔',
            '字符串',
            '非空字符串',
            '非全空白之字符串',
            '数字',
            '有意义之数字',
            '函数',
            '正则表达式',

            '<should not exist>',
            'undefined',
            'object',
            'array',
            'a non-array object',
            'boolean',
            'string',
            'a non-empty string',
            'a non-all-whitespaced string',
            'number',
            'a number but not NaN',
            'function',
            'a regexp',
        ].includes(合规类型)

        const 是函数 = typeof 合规类型 === 'function'

        return 是有效的字符串 || 是函数
    })

    if (合规的类型列表.length === 0) {
        throw new TypeError(构建一条错误消息字符串以阐明数据之期望之类型(
            [ '数组', '字符串', '函数' ],
            合规的类型列表之原始值,
            [
                '<实参>',
                '合规的类型列表',
            ],
            '构建一条错误消息字符串以阐明数据之期望之类型()',
            '构建错误消息字符串'
        ))
    }

    const 值不应存在 = 合规的类型列表.some(条目 => {
        return typeof 条目 === 'string' && [
            '<不应存在>',
            '<should not exist>',
        ].includes(条目)
    })

    if (值不应存在 && 合规的类型列表.length > 1) {
        const 错误消息 = 构建一条错误消息字符串(
            [
                彩色粉笔工具.red(`实参 <${
                    彩色粉笔工具.whiteBright('合规的类型列表')
                }> 声明了“${
                    彩色粉笔工具.green('不应存在')
                }”，却又同时给出了其他允许的类型，自相矛盾。`),
            ],
            发生错误之代码范畴之描述,
            发生错误之软件包之名称
        )

        throw new TypeError(错误消息)
    }


    let 该值之称谓或访问路径 = 该值之称谓或访问路径之原始值
    if (!Array.isArray(该值之称谓或访问路径)) {
        该值之称谓或访问路径 = [ 该值之称谓或访问路径 ]
    }

    该值之称谓或访问路径 = 该值之称谓或访问路径.filter(条目 => {
        if (typeof 条目 === 'string') { return true }
        if (typeof 条目 === 'number') { return !isNaN(条目) }
    })

    if (该值之称谓或访问路径.length === 0) {
        const 错误消息 = 构建一条错误消息字符串以阐明数据之期望之类型(
            [ '字符串', '有意义之数字', '数组' ],
            该值之称谓或访问路径之原始值,
            [
                '<实参>',
                '该值之称谓或访问路径',
            ],
            发生错误之代码范畴之描述,
            发生错误之软件包之名称
        )

        throw new TypeError(错误消息)
    }

    const 该值之称谓或访问路径之逐行内容 = 该值之称谓或访问路径.map((条目, 条目之索引编号) => {
        return `    ${'  '.repeat(条目之索引编号)}${彩色粉笔工具.whiteBright(条目)}`
    })



    let 消息正文逐行内容 = [
        彩色粉笔工具.red('实体“'),
        ...该值之称谓或访问路径之逐行内容,
    ]

    if (值不应存在) {
        消息正文逐行内容.push(
            彩色粉笔工具.red(`”${彩色粉笔工具.green('根本不应该存在')}，`)
        )
    } else {
        消息正文逐行内容.push(
            彩色粉笔工具.red('”应符合以下规则之任一：')
        )
        消息正文逐行内容 = 消息正文逐行内容.concat(
            合规的类型列表.map(条目 => {
                let 实际采纳之条目 = 条目

                if (条目 === RegExp) {
                    实际采纳之条目 = '正则表达式'
                } else if (条目 === Object) {
                    实际采纳之条目 = '对象'
                }

                if (typeof 实际采纳之条目 === 'string') {
                    const 措辞映射字典 = {
                        // 'undefined': '未定义',
                        'object': '对象',
                        'array': '数组',
                        'a non-array object': '非数组之对象',
                        'boolean': '布尔',
                        'string': '字符串',
                        'a non-empty string': '非空字符串',
                        'a non-all-whitespaced string': '非全空白之字符串',
                        'number': '数字',
                        'a number but not NaN': '有意义之数字',
                        'function': '函数',
                        'a regexp': '正则表达式',
                    }

                    const 条目之打印措辞 = 措辞映射字典[实际采纳之条目] || 实际采纳之条目

                    return `    为${彩色粉笔工具.green(条目之打印措辞)}`
                }

                if (typeof 实际采纳之条目 === 'function') {
                    if (实际采纳之条目.name) {
                        return `    为${
                            彩色粉笔工具.green(
                                `由类（函数）“${
                                    彩色粉笔工具.whiteBright(实际采纳之条目.name)
                                }”所构造之实例对象`
                            )
                        }`
                    } else {
                        return `    为${
                            彩色粉笔工具.green(
                                `由${
                                    彩色粉笔工具.whiteBright('某匿名类（匿名函数）')
                                }所构造之实例对象`
                            )
                        }`
                    }
                }

                return null // 不可能至此。
            })
        )
    }

    const 实际得到的值之数据类型 = typeof 得到的实际值

    let 对实际得到的值的描述
    if ([
        'undefined',
        'boolean',
        'number',
    ].includes(实际得到的值之数据类型) || 得到的实际值 === null) {
        对实际得到的值的描述 = `${彩色粉笔工具.cyan(实际得到的值之数据类型)}：${彩色粉笔工具.yellow(得到的实际值)}`
    } else if (实际得到的值之数据类型 === 'string') {
        对实际得到的值的描述 = `${彩色粉笔工具.cyan(实际得到的值之数据类型)}：${彩色粉笔工具.yellow(`"${得到的实际值}"`)}`
    } else if (实际得到的值之数据类型 === 'object') {
        if (Array.isArray(得到的实际值)) {
            对实际得到的值的描述 = `${彩色粉笔工具.cyan('数组')}（长度为 ${彩色粉笔工具.green(得到的实际值.length)}）`
        } else {
            对实际得到的值的描述 = `${彩色粉笔工具.cyan('非数组对象')}`
        }
    } else {
        对实际得到的值的描述 = `${彩色粉笔工具.cyan(实际得到的值之数据类型)}`
    }

    if (值不应存在) {
        消息正文逐行内容.push(
            彩色粉笔工具.red(`而不是为“${对实际得到的值的描述}”。`)
        )
    } else {
        消息正文逐行内容.push(
            彩色粉笔工具.red(`而不应为“${对实际得到的值的描述}”。`)
        )
    }

    return 构建一条错误消息字符串(消息正文逐行内容, 发生错误之代码范畴之描述, 发生错误之软件包之名称)
}